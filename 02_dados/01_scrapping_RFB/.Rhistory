terrain <- data.frame(
num_factor = c(0,1,2,3,4,5,6,7),
terrain = c('SE','LD','CT','RM','RC','RG','RF','SH'),
speed = c(6.5,0.55,5,1.65,15,4.5,3.5,20)
)
kanto_terrain <- kanto_info %>%
mutate(V1 = as.character(V1)) %>%
left_join(., terrain, by=c('V1' = 'terrain')) %>%
dplyr::select(num_factor) %>%
rename(terrain = num_factor) %>%
as.matrix(.)
dim(kanto_terrain) <- c(17, 20)
#fatores de velocidade
kanto_speed <- kanto_info %>%
mutate(V1 = as.character(V1)) %>%
left_join(., terrain, by=c('V1' = 'terrain')) %>%
dplyr::select(speed) %>%
as.matrix(.)
dim(kanto_speed) <- c(17, 20)
#raster de terreno
kanto <- raster(kanto_speed,
xmn=139.81,
xmx=140.18,
ymn=34.81,
ymx=35.19,
crs=CRS("+proj=longlat +datum=WGS84")
)
#matriz de transição: custo de velocidade de cada tipo de terreno
custoMov <- transition(kanto, function(x) 1/mean(x), 8)
custoMov <- geoCorrection(custoMov)
#localização dos pokécenters
centers <- cbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
#plot do mapa
convCoord <- function(vec){
vec * c((140.18-139.81)/21, (35.19-34.81)/18) + c(139.81, 34.81)
}
centers <- t(convCoord(centers))
A <- accCost(custoMov, centers)
A <- A/7000
plot(A, col=brewer.pal(n= 9, name='Greens'))
plot(kanto)
#matriz de transição: custo de velocidade de cada tipo de terreno
custoMov <- transition(kanto, function(x) 1/mean(x), 8)
#raster de terreno
kanto <- raster(kanto_speed,
xmn=139.81,
xmx=140.18,
ymn=34.81,
ymx=35.19,
crs=CRS("+proj=longlat +datum=WGS84")
)
#fatores de velocidade
kanto_speed <- kanto_info %>%
mutate(V1 = as.character(V1)) %>%
left_join(., terrain, by=c('V1' = 'terrain')) %>%
dplyr::select(speed) %>%
as.matrix(.)
#Fatores de tipo de terreno
kanto_info <- read.csv('dataframe_kanto.csv', sep=';', header=F)
#Fatores de tipo de terreno
kanto_info <- read.csv(',/dataframe_kanto.csv', sep=';', header=F)
#Fatores de tipo de terreno
kanto_info <- read.csv('~/dataframe_kanto.csv', sep=';', header=F)
rootQuadr <- function(a, b, c){
delta    <- sqrt(b^2 - 4 * a * c)
pos_Root <- (-b + delta)/(2 * a)
neg_Root <- (-b - delta)/(2 * a)
print(c(pos_Root, neg_Root))
}
rootQuadr(1, 2, 1)
rootQuadr <- function(a, b, c){
delta    <- sqrt(b^2 - 4 * a * c)
pos_Root <- (-b + delta)/(2 * a)
neg_Root <- (-b - delta)/(2 * a)
if(pos_Root == neg_Root){print(c(pos_Root))}
else {print(c(pos_Root, neg_Root))}
}
rootQuadr(1, 2, 1)
sum <- 100
rootQuadr(1, sum, -sum^2)
rootQuadr(1, sum, -sum^2) > 0
rootQuadr(1, sum, -sum^2)[rootQuadr(1, sum, -sum^2) > 0]
a_1 <- rootQuadr(1, sum, -sum^2)[rootQuadr(1, sum, -sum^2) > 0]
a_2 <- sum - a_1
bigGolde(100)
bigGolden <- function(tot){
return(rootQuadr(1, tot, -tot^2)[rootQuadr(1, tot, -tot^2) > 0])
}
bigGolden(100)
bigGolden <- function(tot){
res <- rootQuadr(1, tot, -tot^2)[rootQuadr(1, tot, -tot^2) > 0][0]
return(res)
}
bigGolden(100)
bigGolden <- function(tot){
res <- rootQuadr(1, tot, -tot^2)[rootQuadr(1, tot, -tot^2) > 0][0]
print(res)
}
bigGolden(100)
bigGolden <- function(tot){
res <- rootQuadr(1, tot, -tot^2)[rootQuadr(1, tot, -tot^2) > 0]
print(res)
}
bigGolden(100)
bigGolden <- function(tot){
res <- rootQuadr(1, tot, -tot^2)[rootQuadr(1, tot, -tot^2) > 0]
}
bigGolden(100)
bigGolden(100)[0]
bigGolden(100)[1,1]
a_3 <- rootQuadr(1, a_2, -a_2^2)[rootQuadr(1, a_2, -a_2^2) > 0]
a_4 <_ a_2 - a_3
a_4 <- a_2 - a_3
a_5 <- rootQuadr(1, a_4, -a_4^2)[rootQuadr(1, a_4, -a_4^2) > 0]
a_6 <- a_4 - a_5
a_1 + a_3 + a_5
a_1 + a_3 + a_5 + a_6
milestones <- c(a_1, a_3, a_5, a_6)
sum(milestones)
milestones
sum(milestones[2:4])
sum(milestones[3:4])
sum(milestones)
34+21
34+21+13
34+21+13+8+5+3+2
a_3 <- rootQuadr(1, a_1, -a_1^2)[rootQuadr(1, a_1, -a_1^2) > 0]
a_4 <- a_2 - a_3
a_3 <- rootQuadr(1, a_2, -a_2^2)[rootQuadr(1, a_2, -a_2^2) > 0]
a_4 <- a_2 - a_3
a_1 - a_2
a_2-a_3
a_2 <- sum - a_1
a_3 <- a_1 - a_2
a_4 <- a_2 - a_3
a_5 <- a_3 - a_4
a_6 <- a_4 - a_5
sum(milestones)
milestones
pairs <- c(a_2, a_4, a_6)
pairs
sum(pairs)
milestones <- c(a_1, a_3, a_5, a_6)
sum(milestones[1:4])
sum(milestones[2:4])
sum(milestones[3:4])
sum(milestones[4])
sum(sum - milestones[1:4])
sum(100 - milestones[1:4])
100 - sum(milestones[1:4])
100 - sum(milestones[2:4])
100 - sum(milestones[3:4])
100 - sum(milestones[4:4])
library(tidyverse)
ibge <- read_csv('~/Área de Trabalho/git_folders/tccENAP/02_dados/00_scrapping_ibge/dados_tcc_atualizados_2019-06-28 12:45:36.csv')
View(ibge)
slice <- ibge[1:5, ]
View(slice)
slice$path
ibge <- read_csv('~/Área de Trabalho/git_folders/tccENAP/02_dados/00_scrapping_ibge/dados_tcc_atualizados_2019-06-28 12:45:36.csv') %>%
select(ID, file, url, path, extension)
slice <- ibge[1:5, ]
View(slice)
slice$path
slice <- ibge[1:5, ] %>%
slice <- ibge[1:5, ] %>%
rowwwise() %>%
mutate(
on_computer = str_c('~/Área de Trabalho/git_folders', path)
) %>%
ungroup()
slice <- ibge[1:5, ] %>%
rowwise() %>%
mutate(
on_computer = str_c('~/Área de Trabalho/git_folders', path)
) %>%
ungroup()
View(slice)
slice$on_computer
slice <- ibge[1:5, ] %>%
rowwise() %>%
mutate(
on_computer = str_c('~/Área de Trabalho/git_folders', path),
folder = str_remove(path, file)
) %>%
ungroup()
slice$folder
test <- slice %>%
rowwise() %>%
mutate(exists = file.exists(on_computer)) %>%
ungroup()
View(test)
ibge <- read_csv('~/Área de Trabalho/git_folders/tccENAP/02_dados/00_scrapping_ibge/dados_tcc_atualizados_2019-06-28 12:45:36.csv')
View(ibge)
nrow(ibge$baixado[ibge$baixado == TRUE,])
nrow(ibge$baixado[ibge$baixado == TRUE])
ibge$baixado
ibge$baixado[ibge$baixado == TRUE]
length(ibge$baixado[ibge$baixado == TRUE])
length(ibge$baixado[ibge$baixado == FALSE])
library(RSelenium)
remDr <- remoteDriver(
remoteServerAddr = '192.168.99.100',
port= 4445L
)
remDr$open()
remDr <- remoteDriver(
remoteServerAddr = '192.168.99.100',
port= 4445L
)
remDr$open()
remDr <- remoteDriver(
remoteServerAddr = '192.168.99.100',
port= 4444L
)
remDr$open()
remDr <- remoteDriver(
remoteServerAddr = "192.168.99.100",
port = 4444
)
remDr$open()
?remoteDriver
remDr <- remoteDriver(
remoteServerAddr = "192.168.99.100",
port = 4445L
)
remDr$open()
remDr <- remoteDriver(
port = 4445L
)
remDr$open()
remDr$open()
url <- "http://www.receita.fazenda.gov.br/Aplicacoes/ATBHE/UnidadesAtendimento/Unidades/InformacoesDasUnidades.aspx?unidade=06032"
remDr$navigate(url)
remDr$getTitle()[0]
remDr$getTitle()
remDr$screenshot(display = TRUE)
infoUnid <- remDr$findElement(using = "id", "tableInformacoes")
infoUnid
remDr$switchToFrame(infoUnid)
remDr$switchToWindow(infoUnid)
library(XML)
doc <- htmlParse(remDr$getPageSource())
doc <- htmlParse(remDr$getPageSource()[[1]])
?readHTMLTable
readHTMLTable(doc)
tbls <- readHTMLTable(doc)
tbls
View(tbls)
test <- unlist(tbls)
test <- unlist(tbls[[1]])
test
View(test)
tbls[[1]]
View(tbls[[1]])
unlist(tbls[[1]]
)
test <- unlist(tbls[[1]])
test <- tbls[[1]]
View(test)
doc <- htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')
tbls <- readHTMLTable(doc)
test <- tbls[[1]]
View(test)
#pega o HTML da página obtido pelo Selenium, faz o parse com encondigo UTF 8 e depois pega todas a tabelas da página, separando a primeira (e única), que tem as informações da unidade
infoUnid <- readHTMLTable(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')) [[1]]
View(infoUnid)
library(tidyverse)
?spread
test <- infoUnid %>% spread(key = V1, value = V2)
View(test)
#pega o HTML da página obtido pelo Selenium, faz o parse com encondigo UTF 8 e depois pega todas a tabelas da página, separando a primeira (e única), que tem as informações da unidade
infoUnid <- readHTMLTable(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')) [[1]] %>%
spread(key = V1, value = v2) %>%
select(Unidade, Estado, Cidade, Bairro, CEP, Logradouro, Atendimento, Titular, 'Telefone(s)', Observações)
#pega o HTML da página obtido pelo Selenium, faz o parse com encondigo UTF 8 e depois pega todas a tabelas da página, separando a primeira (e única), que tem as informações da unidade
infoUnid <- readHTMLTable(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')) [[1]] %>%
spread(key = V1, value = v2) %>%
test <- infoUnid %>% spread(key = V1, value = V2) %>% select(Unidade, Estado, Cidade, Bairro, CEP, Logradouro, Atendimento, Titular, 'Telefone(s)', Observações)
#pega o HTML da página obtido pelo Selenium, faz o parse com encondigo UTF 8 e depois pega todas a tabelas da página, separando a primeira (e única), que tem as informações da unidade
infoUnid <- readHTMLTable(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')) [[1]]
test <- infoUnid %>% spread(key = V1, value = V2) %>% select(Unidade, Estado, Cidade, Bairro, CEP, Logradouro, Atendimento, Titular, 'Telefone(s)', Observações)
View(test)
setwd("~/Área de Trabalho/git_folders/tccENAP/02_dados/01_scrapping_RFB")
unds <- read_csv('und_att.csv') %>%
mutate(
ID = NULL,
Estado = as.factor(Estado)
)
View(unds)
unds$URL
sort(unds$URL)
httr::GET('http://www.receita.fazenda.gov.br/Aplicacoes/ATBHE/UnidadesAtendimento/Unidades/InformacoesDasUnidades.aspx?unidade=10061')
test <- httr::GET('http://www.receita.fazenda.gov.br/Aplicacoes/ATBHE/UnidadesAtendimento/Unidades/InformacoesDasUnidades.aspx?unidade=10061')
test$status_code
test <- httr::GET('http://www.receita.fazenda.gov.br/Aplicacoes/ATBHE/UnidadesAtendimento/Unidades/InformacoesDasUnidades.aspx?unidade=10060')
test$status_code
url2 <- 'http://www.receita.fazenda.gov.br/Aplicacoes/ATBHE/UnidadesAtendimento/Unidades/InformacoesDasUnidades.aspx?unidade=10061'
remDr$navigate(url2)
infoUnid2 <- readHTMLTable(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')) [[1]]
View(infoUnid2)
url2 <- 'http://www.receita.fazenda.gov.br/Aplicacoes/ATBHE/UnidadesAtendimento/Unidades/InformacoesDasUnidades.aspx?unidade=00000'
remDr$navigate(url2)
infoUnid2 <- readHTMLTable(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')) [[1]]
remDr$screenshot(display=TRUE)
remDr$getTitle()
infoUnid2 <- try(readHTMLTable(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')) [[1]])
infoUnid2 <- readHTMLTable(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')) [[1]]
infoUnid2 <- htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')
infoUnid2
str_detect(infoUnid2, 'Erro ao carregar endereço da unidade')
View(infoUnid2)
httr::content(infoUnid2, 'text')
test <- xmlToList(infoUnid2)
View(test)
remDr$getCurrentUrl
test <- remDr$getCurrentUrl
test <- remDr$getCurrentUrl()
View(test)
test[[1]]
data.frame(unid = 0:99999)
unids <_ data.frame(unid = 0:99999)
unids <- data.frame(unid = 0:99999)
View(unids)
unids <- data.frame(unid = 0:99999, status = NA)
str_pad(unids$unid[1], 5, side=c('right'))
str_pad(unids$unid[1], 5, side=c('right'), '0')
str_pad(unids$unid[3], 5, side=c('right'), '0')
str_pad(unids$unid[3], 5, side=c('left'), '0')
str_pad(unids$unid[45], 5, side=c('left'), '0')
unids <- data.frame(unid = 0:99999, status = NA) %>%
mutate(
url = str_c('http://www.receita.fazenda.gov.br/Aplicacoes/ATBHE/UnidadesAtendimento/Unidades/InformacoesDasUnidades.aspx?unidade=', str_pad(unid, 5, side=c('left'), '0')),
unid = NULL
)
View(unds)
View(unids)
unids$url[1]
unids$url[45]
unids$url[1000000]
unids$url[100000]
unids <- data.frame(unid = 0:99999, status = NA) %>%
mutate(
url = str_c('http://www.receita.fazenda.gov.br/Aplicacoes/ATBHE/UnidadesAtendimento/Unidades/InformacoesDasUnidades.aspx?unidade=', str_pad(unid, 5, side=c('left'), '0')),
unid = NULL
) %>%
select(url, status)
View(unids)
cat('url testada')
for(i in 1:nrow(unids)){
remDr$navigate(unids$url[i])
if(remDr$getCurrentUrl == urlErro){
unids$status[i] <- FALSE
} else {
unids$status[i] <- TRUE
}
cat(paste('url num. ', i, '/', nrow(unids), ' testada.', sep='', collapse=''))
}
urlErro <- 'http://www.receita.fazenda.gov.br/Aplicacoes/ATBHE/UnidadesAtendimento/Unidades/Erro.htm'
for(i in 1:nrow(unids)){
remDr$navigate(unids$url[i])
if(remDr$getCurrentUrl == urlErro){
unids$status[i] <- FALSE
} else {
unids$status[i] <- TRUE
}
cat(paste('url num. ', i, '/', nrow(unids), ' testada.', sep='', collapse=''))
}
remDr$getCurrentUrl
remDr$getCurrentUrl[[1]]
remDr$getCurrentUrl[1
]
remDr$getCurrentUrl
remDr$getCurrentUrl()
remDr$getCurrentUrl()[[1]]
for(i in 1:nrow(unids)){
remDr$navigate(unids$url[i])
if(remDr$getCurrentUrl()[[1]] == urlErro){
unids$status[i] <- FALSE
} else {
unids$status[i] <- TRUE
}
cat(paste('url num. ', i, '/', nrow(unids), ' testada.', sep='', collapse=''))
}
cat(paste('teste 1', '/n', 'teste 2', collapse = '', sep=''))
cat(paste('teste 1', '\n', 'teste 2', collapse = '', sep=''))
for(i in 1:nrow(unids)){
remDr$navigate(unids$url[i])
if(remDr$getCurrentUrl()[[1]] == urlErro){
unids$status[i] <- FALSE
} else {
unids$status[i] <- TRUE
}
cat(paste('url num. ', i, '/', nrow(unids), ' testada.', '\n', sep='', collapse=''))
}
unique(unids$status)
testUrl <- "http://www.receita.fazenda.gov.br/Aplicacoes/ATBHE/UnidadesAtendimento/Unidades/InformacoesDasUnidades.aspx?unidade=06032"
cat(TRUE)
testUrl <- "http://www.receita.fazenda.gov.br/Aplicacoes/ATBHE/UnidadesAtendimento/Unidades/InformacoesDasUnidades.aspx?unidade=06032"
testUrl <- "http://www.receita.fazenda.gov.br/Aplicacoes/ATBHE/UnidadesAtendimento/Unidades/InformacoesDasUnidades.aspx?unidade=06032"
remDr$navigate(testUrl)
if(remDr$getCurrentUrl()[[1]] == urlErro){
cat(FALSE)
} else {
cat(TRUE)
}
#declaração de lista de dataframes das URLs testadas positivo
infoUnids <- list()
append(infoUnids, c(1))
infoUnids
c(infoUnids, c(1))
infoUnids <- c(infoUnids, c(1))
#declaração de lista de dataframes das URLs testadas positivo
infoUnids <- list()
#testar obtençao de informações dessa página: http://receita.economia.gov.br/interface/lista-de-servicos/publico/cidadao/aduana/colecao
urlAtt <- http://receita.economia.gov.br/interface/lista-de-servicos/publico/cidadao/aduana/colecao
#testar obtençao de informações dessa página
urlAtt <- 'http://receita.economia.gov.br/interface/lista-de-servicos/publico/cidadao/aduana/colecao'
remDr$navigate(urlAtt)
remDr$screenshot(display = TRUE)
tbl <- readHTMLTable(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')) [[1]]
View(tbl)
tbl <- readHTMLTable(htmlParse(remDr$getPageSource(), encoding = 'UTF-8')) [[1]]
tbl <- readHTMLTable(htmlParse(remDr$getPageSource()[[2]], encoding = 'UTF-8')) [[1]]
tbl <- readHTMLTable(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')) [[1]]
tbl <- readHTMLTable(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')) [[2]]
View(tbl)
tbl <- readHTMLTable(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8'))
View(tbl)
unlist(tbl)
tblAtts <- tbl[[1]] %>% spread(key = V1, value = V2)
View(tblAtts)
tblAtts <- tbl[[2]] %>% spread(key = V1, value = V2)
View(tblAtts)
tblAtts <- tbl[[1]] %>% spread(key = V1, value = V2)
length(tbl)
for(i in 2:length(tbl)){
currTbl <- tbl[[i]] %>% spread(key = V1, value = V2)
tblAtts <- tblAtts %>% bind_rows(currTbl)
}
View(tblAtts)
View(tblAtts)
library(RCurl)
tbl
install.packages('selectr')
install.packages('selectr')
install.packages('selectr')
install.packages('selectr')
library(selectr)
path <- css_to_xpath('.image-inline')
xpathSApply(tbl, path, xmlAttrs)['src']
xpathSApply(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8'), path, xmlAttrs)['src']
#acessar firefox e Selenium instalados num container Docker, ativo em servidor local
remDr <- remoteDriver(port = 4445L)
remDr$open()
library(selectr)
path <- css_to_xpath('.image-inline')
xpathSApply(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8'), path, xmlAttrs)['src']
xpathSApply(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8'), path, xmlAttrs)
path <- css_to_xpath('#image-inline')
xpathSApply(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8'), path, xmlAttrs)
xpathSApply(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8'), css_to_xpath('#image-inline'), xmlAttrs)
xpathSApply(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8'), '/html/body/div[2]/div[2]/div[1]/div/div[3]/div[1]/div/div[4]/div[1]/div[3]/table/tbody/tr[5]/td[2]/a/img', xmlAttrs)
xpathSApply(htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8'), '/html/body/div[2]/div[2]/div[1]/div/div[3]/div[1]/div/div[4]/div[1]/div[3]/table/tbody/tr[5]/td[2]/a/img')
library(rvest)
images <- htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8') %>% html_nodes('.image-inline') %>% html_attr("src")
htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')
#testar obtençao de informações dessa página
urlAtt <- 'http://receita.economia.gov.br/interface/lista-de-servicos/publico/cidadao/aduana/colecao'
remDr$navigate(urlAtt)
remDr$screenshot(display = TRUE)
images <- htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8') %>% html_nodes('.image-inline') %>% html_attr("src")
test <- read_html(urlAtt)
images <- read_html(urlAtt) %>% html_nodes('.image-inline') %>% html_attr("src")
images
View(test)
View(images)
head(images)
unique(images)
length(unique(images))
unique(images)
images <- read_html(urlAtt) %>% html_nodes('td > a') %>% html_attr("src")
View(images)
images <- read_html(urlAtt) %>% html_nodes('td > a > img') %>% html_attr("src")
unique(images)
images
length(images)
test <- read_html(urlAtt)
test2 <- remDr$getPageSource()[[1]]
test2 <- htmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')
str(tets)
str(test)
str(test2)
test2
test2 <- xmlParse(remDr$getPageSource()[[1]], encoding = 'UTF-8')
test2 <- remDr$getPageSource()[[1]], encoding = 'UTF-8'
?findElements
remDr$findElements(using='css selector', value='td > a > img')
test <- remDr$findElements(using='css selector', value='td > a > img')
View(test)
test[[1]]$getElementAttribute('src')
test[[1]]$getElementLocation()
