#projection(rast) <- CRS("+proj=longlat +datum=WGS84")
#plot(rast)
#rast
#rast$value2 <- 1
#rast
#plot(rast)
#------------------------
library(raster)
library(tidyverse)
library(RColorBrewer)
#Fatores de tipo de terreno
kanto_info <- read.csv('dataframe_kanto.csv', sep=';', header=F)
terrain <- data.frame(
num_factor = c(0,1,2,3,4,5,6,7),
terrain = c('SE','LD','CT','RM','RC','RG','RF','SH'),
speed = c(6.5,0.55,5,1.65,15,4.5,3.5,20)
)
kanto_terrain <- kanto_info %>%
mutate(V1 = as.character(V1)) %>%
left_join(., terrain, by=c('V1' = 'terrain')) %>%
dplyr::select(num_factor) %>%
rename(terrain = num_factor) %>%
as.matrix(.)
dim(kanto_terrain) <- c(17, 20)
#fatores de velocidade
kanto_speed <- kanto_info %>%
mutate(V1 = as.character(V1)) %>%
left_join(., terrain, by=c('V1' = 'terrain')) %>%
dplyr::select(speed) %>%
as.matrix(.)
dim(kanto_speed) <- c(17, 20)
#raster de terreno
kanto <- raster(kanto_speed,
xmn=139.81,
xmx=140.18,
ymn=34.81,
ymx=35.19,
crs=CRS("+proj=longlat +datum=WGS84")
)
#matriz de transição: custo de velocidade de cada tipo de terreno
custoMov <- transition(kanto, function(x) 1/mean(x), 8)
custoMov <- geoCorrection(custoMov)
#localização dos pokécenters
kanto_centers <- cbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
vec * c((140.18-139.81)/21, (35.19-34.81)/18) + c(139.81, 34.81)
}
centers <- t(convCoord(kanto_centers))
CostMap <- accCost(custoMov, kanto_centers)
#localização dos pokécenters
kanto_centers <- cbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
library(raster)
library(tidyverse)
library(RColorBrewer)
#Fatores de tipo de terreno
kanto_info <- read.csv('dataframe_kanto.csv', sep=';', header=F)
terrain <- data.frame(
num_factor = c(0,1,2,3,4,5,6,7),
terrain = c('SE','LD','CT','RM','RC','RG','RF','SH'),
speed = c(6.5,0.55,5,1.65,15,4.5,3.5,20)
)
kanto_terrain <- kanto_info %>%
mutate(V1 = as.character(V1)) %>%
left_join(., terrain, by=c('V1' = 'terrain')) %>%
dplyr::select(num_factor) %>%
rename(terrain = num_factor) %>%
as.matrix(.)
dim(kanto_terrain) <- c(17, 20)
#fatores de velocidade
kanto_speed <- kanto_info %>%
mutate(V1 = as.character(V1)) %>%
left_join(., terrain, by=c('V1' = 'terrain')) %>%
dplyr::select(speed) %>%
as.matrix(.)
dim(kanto_speed) <- c(17, 20)
#raster de terreno
kanto <- raster(kanto_speed,
xmn=139.81,
xmx=140.18,
ymn=34.81,
ymx=35.19,
crs=CRS("+proj=longlat +datum=WGS84")
)
#matriz de transição: custo de velocidade de cada tipo de terreno
custoMov <- transition(kanto, function(x) 1/mean(x), 8)
custoMov <- geoCorrection(custoMov)
#localização dos pokécenters
kanto_centers <- cbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
vec * c((140.18-139.81)/21, (35.19-34.81)/18) + c(139.81, 34.81)
}
centers <- t(convCoord(kanto_centers))
CostMap <- accCost(custoMov, kanto_centers)
View(kanto_centers)
#localização dos pokécenters
kanto_centers <- cbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
View(kanto_centers)
#localização dos pokécenters
kanto_centers <- rbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
View(kanto_centers)
CostMap <- accCost(custoMov, kanto_centers)
CostMap <- CostMap/7000
#plot dos mapas
par(mfrow=c(2, 1))
plot(A, col=brewer.pal(n= 9, name='Greens'))
plot(CostMap, col=brewer.pal(n= 9, name='Greens'))
plot(kanto)
#localização dos pokécenters
kanto_centers <- rbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
vec * c((140.18-139.81)/21, (35.19-34.81)/18) + c(139.81, 34.81)
}
centers <- t(convCoord(kanto_centers))
centers
custoMov
accCost()
accCost(custoMov, kanto_centers)
accCost
plot(accCost(custoMov,, kanto_centers))
plot(accCost(custoMov, kanto_centers))
?accCost
kanto_centers <- t(convCoord(kanto_centers))
CostMap <- accCost(custoMov, kanto_centers)
CostMap <- accCost(custoMov, kanto_centers)
CostMap <- accCost(custoMov, centers)
#localização dos pokécenters
centers <- rbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
vec * c((140.18-139.81)/21, (35.19-34.81)/18) + c(139.81, 34.81)
}
centers <- t(convCoord(centers))
CostMap <- accCost(custoMov, centers)
plot(CostMap)
centers
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
vec * c((140.18-139.81)/21, (35.19-34.81)/18) + c(139.81, 34.81))
}
centers <- t(convCoord(centers))
CostMap <- accCost(custoMov, centers)
centers
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
vec * c((140.18-139.81)/21, (35.19-34.81)/18) + c(139.81, 34.81)
}
centers <- t(convCoord(centers))
centers
plot(kanto)
(140.18-139.81)/21
(35.19-34.81)/18
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
delta_x <- (140.18-139.81)/21
denta_y <- (35.19-34.81)/18
vec * c(delta_x, delta_y) + c(139.81, 34.81)
}
convCoord(centers)
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
delta_x <- (140.18-139.81)/21
delta_y <- (35.19-34.81)/18
vec * c(delta_x, delta_y) + c(139.81, 34.81)
}
convCoord(centers)
#localização dos pokécenters
centers <- rbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
centers
delta_x <- (140.18-139.81)/21
delta_y <- (35.19-34.81)/18
centers * c(delta_x, delta_y
centers * c(delta_x, delta_y)
centers * c(delta_x, delta_y) + c(139.81, 34.81)
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
delta_x <- (140.18-139.81)/21
delta_y <- (35.19-34.81)/18
result <- vec * c(delta_x, delta_y)
result <- result + c(139.81, 34.81)
}
convCoord(centers)
t <- convCoord(centers)
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
delta_x <- (140.18-139.81)/21
delta_y <- (35.19-34.81)/18
result <- vec * c(delta_x, delta_y)
result <- result + c(139.81, 34.81)
return(result)
}
t <- convCoord(centers)
t <- convCoord(centers)
t
#localização dos pokécenters
centers <- rbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
delta_x <- (140.18-139.81)/21
delta_y <- (35.19-34.81)/18
result <- vec * c(delta_x, delta_y)
result <- result + c(139.81, 34.81)
return(result)
}
centers <- t(convCoord(centers))
CostMap <- accCost(custoMov, centers)
centers <- t(convCoord(centers))
centers
CostMap <- accCost(custoMov, centers)
CostMap <- CostMap/7000
plot(CostMap, col=brewer.pal(n= 9, name='Greens'))
centers
t(convCoord())
t(convCoord(centers))
centers <- raster::t(convCoord(centers))
CostMap <- accCost(custoMov, centers)
centers <- convCoord(centers)
CostMap <- accCost(custoMov, centers)
#localização dos pokécenters
centers <- rbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
delta_x <- (140.18-139.81)/21
delta_y <- (35.19-34.81)/18
result <- vec * c(delta_x, delta_y)
result <- result + c(139.81, 34.81)
return(result)
}
centers <- convCoord(centers)
CostMap <- accCost(custoMov, centers)
accCost
plot(CostMap)
CostMap
CostMap$layer
centers
#localização dos pokécenters
kanto_centers <- rbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
#localização dos pokécenters
grid_centers <- rbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
??t
raster::t()
centers <- t(convCoord(centers))
CostMap <- accCost(custoMov, centers)
View(custoMov)
CostMap <- accCost(custoMov, centers[1,])
centers <- convCoord(centers)
centers[1,]
#localização dos pokécenters
grid_centers <- rbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
kanto_centers <- convCoord(grid_centers)
kanto_centers
grid_centers * c(delta_x, delta_y)
grid_centers %*% c(delta_x, delta_y)
c(delta_x, delta_y) %*% grid_centers
grid_centers
grid_centers * c(1, 2)
grid_centers %*% c(1, 2)
grid_centers
cbind(grid_centers[,1] * delta_x, grid_centers[,2] * delta_y)
cbind(grid_centers[,1] * delta_x, grid_centers[,2] * delta_y)+c(139.81, 34.81)
cbind(grid_centers[,1] * delta_x + 139.81, grid_centers[,2] * delta_y+34.81)
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
delta_x <- (140.18-139.81)/21
delta_y <- (35.19-34.81)/18
result <- cbind(vec[,1] * delta_x + 139.81, vec[,2] * delta_y+34.81)
return(result)
}
kanto_centers <- convCoord(grid_centers)
kanto_centers
CostMap <- accCost(custoMov, centers[1,])
kanto_centers <- t(convCoord(grid_centers))
CostMap <- accCost(custoMov, centers[1,])
kanto_centers
length(kanto_centers)
kanto_centers <- convCoord(grid_centers)
length(kanto_centers)
kanto_centers
CostMap <- accCost(custoMov, centers[1,])
CostMap <- accCost(custoMov, kanto_centers)
CostMap <- CostMap/7000
plot(CostMap, col=brewer.pal(n= 9, name='Greens'))
source('~/dados_kanto/raster_kanto.r')
plot(kanto, main='Custo de movimentação de terreno')
plot(CostMap, col=brewer.pal(n= 9, name='Greens'), main='Isocronos para centros mais próximos')
source('~/dados_kanto/raster_kanto.r')
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(tidyverse)
library(RColorBrewer)
#Fatores de tipo de terreno
kanto_info <- read.csv('dataframe_kanto.csv', sep=';', header=F)
terrain <- data.frame(
num_factor = c(0,1,2,3,4,5,6,7),
terrain = c('SE','LD','CT','RM','RC','RG','RF','SH'),
speed = c(6.5,0.55,5,1.65,15,4.5,3.5,20)
)
kanto_terrain <- kanto_info %>%
mutate(V1 = as.character(V1)) %>%
left_join(., terrain, by=c('V1' = 'terrain')) %>%
dplyr::select(num_factor) %>%
rename(terrain = num_factor) %>%
as.matrix(.)
dim(kanto_terrain) <- c(17, 20)
#fatores de velocidade
kanto_speed <- kanto_info %>%
mutate(V1 = as.character(V1)) %>%
left_join(., terrain, by=c('V1' = 'terrain')) %>%
dplyr::select(speed) %>%
as.matrix(.)
dim(kanto_speed) <- c(17, 20)
#raster de terreno
kanto <- raster(kanto_speed,
xmn=139.81,
xmx=140.18,
ymn=34.81,
ymx=35.19,
crs=CRS("+proj=longlat +datum=WGS84")
)
#matriz de transição: custo de velocidade de cada tipo de terreno
custoMov <- transition(kanto, function(x) 1/mean(x), 8)
custoMov <- geoCorrection(custoMov)
#localização dos pokécenters
grid_centers <- rbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
delta_x <- (140.18-139.81)/21
delta_y <- (35.19-34.81)/18
result <- cbind(vec[,1] * delta_x + 139.81, vec[,2] * delta_y+34.81)
return(result)
}
kanto_centers <- convCoord(grid_centers)
CostMap <- accCost(custoMov, kanto_centers)
CostMap <- CostMap/7000
plot(kanto)
#matriz de transição: custo de velocidade de cada tipo de terreno
custoMov <- transition(kanto, function(x) 1/mean(x), 8)
custoMov <- geoCorrection(custoMov)
#localização dos pokécenters
grid_centers <- rbind(
c(3,3),
c(5,4),
c(5,16),
c(8,4),
c(10,6),
c(11,14),
c(13,3),
c(13,6),
c(13,10),
c(17,6))
convCoord <- function(vec){
#função para por os centros pokémons nas coordenadas corretas
delta_x <- (140.18-139.81)/21
delta_y <- (35.19-34.81)/18
result <- cbind(vec[,1] * delta_x + 139.81, vec[,2] * delta_y+34.81)
return(result)
}
kanto_centers <- convCoord(grid_centers)
CostMap <- accCost(custoMov, kanto_centers)
CostMap <- CostMap/7000
plot(CostMap)
par(mfrow=c(2, 1))
plot(kanto, main='Custo de movimentação de terreno')
plot(CostMap, main='Isocronos para centros mais próximos')
par(mfrow=c(1, 2))
plot(kanto, main='Custo de movimentação de terreno')
plot(CostMap, main='Isocronos para centros mais próximos')
source('~/dados_kanto/raster_kanto.r')
![]("mapa_overview.png")
source('~/dados_kanto/raster_kanto.r')
